doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  title Inventory Management System
  style.
    body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    }
    header {
    background-color: #333;
    color: #fff;
    text-align: center;
    padding: 1rem;
    }
    main {
    padding: 1rem;
    }
    form {
    display: flex;
    flex-direction: column;
    max-width: 400px;
    margin: 0 auto;
    }
    label {
    margin-bottom: 0.5rem;
    }
    input[type="date"],
    input[type="number"],
    input[type="text"] {
    padding: 0.5rem;
    margin-bottom: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    }
    button {
    padding: 0.75rem 1rem;
    background-color: #333;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    }
    table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    }
    th, td {
    border: 1px solid #ccc;
    padding: 0.5rem;
    text-align: left;
    }
    th {
    background-color: #f2f2f2;
    }
header
  h1 Purchase Summary 
main
  table#purchaseHistoryTable
    thead
      tr
        th Purchase Date
        th Product
        th Quantity
        th Unit Price
        th Total Cost
    tbody
      // Purchase history data will be dynamically added here
script.
  async function fetchPurchaseHistory() {
  try {
  const response = await fetch('/purchase');
  if (!response.ok) {
  throw new Error('Failed to fetch purchase history.');
  }
  const data = await response.json();
  displayPurchaseHistory(data);
  } catch (err) {
  console.error(err);
  // Handle error (show an error message to the user, etc.).
  }
  }
  function displayPurchaseHistory(purchases) {
  const tableBody = document.querySelector('#purchaseHistoryTable tbody');
  tableBody.innerHTML = '';
  purchases.forEach(purchase => {
  const row = document.createElement('tr');
  row.innerHTML = `
  <td>${new Date(purchase.purchaseDate).toLocaleDateString()}</td>
  <td>${purchase.product}</td>
  <td>${purchase.quantity}</td>
  <td>${purchase.unitPrice}</td>
  <td>${purchase.totalCost}</td>
  `;
  tableBody.appendChild(row);
  });
  }
  async function addPurchase(event) {
  event.preventDefault();
  const form = event.target;
  const formData = new FormData(form);
  const data = Object.fromEntries(formData);
  try {
  const response = await fetch('/purchase', {
  method: 'POST',
  headers: {
  'Content-Type': 'application/json',
  },
  body: JSON.stringify(data),
  });
  if (!response.ok) {
  throw new Error('Failed to add purchase history.');
  }
  form.reset();
  fetchPurchaseHistory();
  } catch (err) {
  console.error(err);
  // Handle error (show an error message to the user, etc.).
  }
  }
  const purchaseForm = document.querySelector('#purchaseForm');
  purchaseForm.addEventListener('submit', addPurchase);
  // Fetch and display the initial purchase history when the page loads.
  fetchPurchaseHistory();
